<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="673.000000pt" height="865.000000pt" viewBox="0 0 673.000000 865.000000"
 preserveAspectRatio="xMidYMid meet">
<metadata>
Created by potrace 1.15, written by Peter Selinger 2001-2017
</metadata>
<g transform="translate(0.000000,865.000000) scale(0.100000,-0.100000)"
fill="#000000" stroke="none">
<path width:100 d="M3130 8634 c-552 -49 -1056 -211 -1515 -487 -861 -517 -1452 -1428
-1592 -2457 -20 -152 -23 -573 -5 -725 95 -784 402 -1512 995 -2358 142 -204
288 -388 528 -667 439 -511 1117 -1252 1576 -1720 l211 -215 22 20 c30 26 365
393 616 675 1050 1179 1871 2176 2196 2665 168 252 363 718 457 1090 36 146
75 352 92 500 17 142 17 528 0 670 -98 820 -433 1507 -1006 2063 -538 523
-1168 823 -1945 927 -110 15 -534 28 -630 19z m635 -514 c779 -117 1446 -514
1908 -1135 511 -687 690 -1581 481 -2405 -178 -704 -606 -1307 -1213 -1708
-205 -136 -503 -277 -732 -346 -917 -277 -1889 -91 -2641 505 -132 105 -342
315 -446 446 -309 390 -508 837 -591 1324 -67 394 -51 783 49 1179 286 1131
1229 1977 2385 2139 214 30 209 29 445 26 153 -3 255 -10 355 -25z"/>
<path d="M2485 7408 c-32 -18 -76 -61 -92 -92 -8 -15 -47 -125 -86 -245 -40
-119 -83 -233 -95 -254 -13 -20 -45 -50 -70 -65 l-47 -27 -315 -2 c-378 -2
-399 -4 -475 -37 -131 -59 -212 -148 -265 -294 l-30 -83 0 -1112 0 -1112 28
-76 c58 -155 163 -261 302 -305 30 -9 59 -21 64 -25 13 -11 3899 -12 3912 -1
5 5 29 14 54 21 110 31 222 123 278 228 17 32 40 95 51 140 21 80 21 101 21
1133 0 1155 1 1125 -61 1255 -55 116 -162 209 -283 247 -55 17 -93 19 -381 18
-375 -1 -400 3 -462 74 -33 37 -49 77 -117 281 -48 141 -91 253 -107 275 -54
74 3 70 -951 70 -603 -1 -859 -4 -873 -12z m1000 -922 c363 -33 709 -258 894
-580 330 -578 121 -1311 -463 -1622 -185 -98 -336 -136 -546 -137 -329 -2
-606 112 -838 343 -227 228 -342 506 -342 830 0 313 110 585 325 809 131 135
253 218 422 284 179 70 340 91 548 73z m1665 -248 c62 -32 92 -85 87 -155 -11
-163 -212 -211 -304 -74 -30 45 -30 112 0 166 25 45 92 85 142 85 17 0 51 -10
75 -22z"/>
<path d="M3215 6004 c-38 -8 -113 -36 -165 -61 -79 -39 -110 -62 -181 -133
-73 -72 -94 -101 -132 -180 -101 -209 -102 -412 -2 -615 86 -176 222 -297 407
-361 98 -34 261 -43 368 -20 144 30 305 129 395 244 57 70 118 195 139 283 21
84 20 220 0 312 -84 370 -456 609 -829 531z"/>
</g>
</svg>

<script>

    getMarkerDetails = (marker,infoWindow)=> {
        /* this func sends requests to Wikipedia (to get the description text for the infoWindow) 
            && Flickr to get the array of availiable photos.
            If the current marker has already made a succeful call to an API it wont repeat the call twice
            and simply skips to  openInfoWindow()
        */
       
        const mapInstance = this;
        const checkDescription = 'Error. failed to fetch data from wikipedia';
        if (!marker.description || marker.description === checkDescription) {
            this.getWikiDescription(marker.title)
            .then((response)=> {
                return response.json();
            })
            .catch((error)=>{
                console.log(error);
                marker.intro = 'Error. failed to fetch data from wikipedia';
                marker.description = 'Error. failed to fetch data from wikipedia';
                return {err: true};
            })
            .then((myJson)=> {
                if (!myJson.err) {
                    const wikiPageObj = myJson.query.pages;
                    const wikiPageObjKeys = Object.keys(wikiPageObj);
                    Object.keys(wikiPageObj).length === 1 && wikiPageObjKeys[0] !== '-1' ? 
                        marker.description = wikiPageObj[wikiPageObjKeys[0]].extract :
                        marker.description = `Sorry no Wikipedia entry about ${marker.title}.`;
                    marker.intro = marker.description.slice(0,marker.description.indexOf('.') + 1);
                    console.log('searching for Undefined myJson... ' + marker.intro);
                }
            });
        }

        if (!marker.urls || marker.urls.error) {
            console.log('!marker.urls ' + !marker.urls);
            // console.log('marker.urls.error ' + marker.urls.error); //breacks cause marker.urls.error is undefined

            marker.urls = FlickrAPI.getPhotosByTag(marker).then((res)=>{
                FlickrAPI.flickrUrlConstructor(res)
                .then((res)=> {
                    marker.urls = res;
                    console.log('158 just changed marker.urls = res : ' + marker.urls);
                    console.log(marker.urls);
                    this.props.changeStateSingle(marker);
                    mapInstance.openInfoWindow(marker,infoWindow);
                });
            });
        } else {
            mapInstance.openInfoWindow(marker,infoWindow);
        }
    }

    getWikiDescription = (title) => {
        return fetch(`https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=1&explaintext=1&origin=*&titles=${title}`)
    }
    </script>